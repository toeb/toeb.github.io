<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cmake on toeb&#39;s Blog</title>
    <link>https://toeb.github.io/tags/cmake/</link>
    <description>Recent content in cmake on toeb&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://toeb.github.io/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cmakepp: Expression Syntax</title>
      <link>https://toeb.github.io/post/cmakeppexpressionsyntax/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://toeb.github.io/post/cmakeppexpressionsyntax/</guid>
      <description>“CMake’s syntax is not sexy.” Is a statement that probably everyone can understand. It does not allow the developer rudimentary constructs which almost all other languages have. But because CMake’s language is astonishingly flexible I was able to create a lexer and parser and interpreter for a custom 100 % compatible syntax which (once “JIT transpiled”) is also fast. I call it cmakepp expressions or expr for short. I want to emphasize that all of this is written in 100% compatible cmake code and you can use it without the need to preprocess any cmake files or adding any dependencies (except cmakepp).</description>
    </item>
    
    <item>
      <title>CMake and the Filesystem</title>
      <link>https://toeb.github.io/post/cmakeppfilesystem/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://toeb.github.io/post/cmakeppfilesystem/</guid>
      <description>Filesystem I have always been a bit confused when working with cmake’s file functions and the logic behind paths (sometimes they are found sometimes they are not…) For ease of use I reimplemented a own path managing system which behaves very similar to powershell and bash (see ss64.com) it is based around a global path stack and path qualification. All of my functions which work with paths use this system.</description>
    </item>
    
  </channel>
</rss>
